{"version":3,"sources":["sounds/clap.wav","sounds/hihat.wav","sounds/kick.wav","sounds/openhat.wav","sounds/boom.wav","sounds/ride.wav","sounds/snare.wav","sounds/tom.wav","sounds/tink.wav","buttons.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","buttons","button","buttonText","buttonValue","buttonName","App","sounds","65","KeyA","83","KeyS","68","KeyF","70","KeyD","71","KeyG","72","KeyH","74","KeyI","75","KeyJ","76","KeyK","useEffect","document","addEventListener","event","console","log","keyCode","theKey","Audio","play","className","map","onClick","e","keyPressed","name","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4GAAAA,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,iJCkD1BC,G,MAlDD,CACZ,CACAC,OAAO,IACPC,WAAW,WACXC,YAAY,MAEZ,CACEC,WAAW,IACXF,WAAW,YACXC,YAAY,MAEd,CACEC,WAAW,IACXF,WAAW,WACXC,YAAY,MAEd,CACEC,WAAW,IACXF,WAAW,eACXC,YAAY,MAEd,CACEC,WAAW,IACXF,WAAW,WACXC,YAAY,MAEd,CACEC,WAAW,IACXF,WAAW,WACXC,YAAY,MAEd,CACEC,WAAW,IACXF,WAAW,YACXC,YAAY,MAGd,CACEC,WAAW,IACXF,WAAW,UACXC,YAAY,MAEd,CACEC,WAAW,IACXF,WAAW,WACXC,YAAY,Q,0JCuBHE,MAlDf,WAIA,IAAMC,EAAS,CACbC,GAAGC,IACHC,GAAGC,IACHC,GAAGC,IACHC,GAAGC,IACHC,GAAGC,IACHC,GAAGC,IACHC,GAAGC,IACHC,GAAGC,IACHC,GAAGC,KAqBH,OAbFC,qBAAU,WACRC,SAASC,iBAAiB,WAAU,SAACC,GAGnCC,QAAQC,IAAI,eAAeF,EAAMG,SACjC,IAAIC,EAAQJ,EAAMG,QACH,IAAIE,MAAM3B,EAAO0B,IACvBE,UACT,MAMA,yBAAKC,UAAU,kBACZnC,EAAQoC,KAAI,SAAAnC,GACX,OACE,6BAASkC,UAAU,oBACjB,4BAAQA,UAAU,UAAUE,QAAS,SAACC,GAvB9B,IAACC,IAuB8CtC,EAAOE,YAtBzD,IAAI8B,MAAM3B,EAAOiC,IACvBL,QAqB8EM,KAAMvC,EAAOG,YAAaH,EAAOC,kBC7CtGuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASrB,SAASsB,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.1d2437ae.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/clap.a6e86dd7.wav\";","module.exports = __webpack_public_path__ + \"static/media/hihat.4ba39e07.wav\";","module.exports = __webpack_public_path__ + \"static/media/kick.4dd58595.wav\";","module.exports = __webpack_public_path__ + \"static/media/openhat.a62db465.wav\";","module.exports = __webpack_public_path__ + \"static/media/boom.550be808.wav\";","module.exports = __webpack_public_path__ + \"static/media/ride.b0d70ec5.wav\";","module.exports = __webpack_public_path__ + \"static/media/snare.80c4129b.wav\";","module.exports = __webpack_public_path__ + \"static/media/tom.572ed39d.wav\";","module.exports = __webpack_public_path__ + \"static/media/tink.2a6bb6f5.wav\";","const buttons = [\n    {\n    button:\"A\",\n    buttonText:\"A - Clap\",\n    buttonValue:\"65\"\n    },\n    {\n      buttonName:\"S\",\n      buttonText:\"S - Hihat\",\n      buttonValue:\"83\"\n    },\n    {\n      buttonName:\"D\",\n      buttonText:\"D - Kick\",\n      buttonValue:\"68\"\n    },\n    {\n      buttonName:\"F\",\n      buttonText:\"F - Open Hat\",\n      buttonValue:\"70\"\n    },\n    {\n      buttonName:\"G\",\n      buttonText:\"G - Boom\",\n      buttonValue:\"71\"\n    },\n    {\n      buttonName:\"H\",\n      buttonText:\"H - Ride\",\n      buttonValue:\"72\"\n    },\n    {\n      buttonName:\"J\",\n      buttonText:\"J - Snare\",\n      buttonValue:\"74\"\n\n    },\n    {\n      buttonName:\"K\",\n      buttonText:\"K - Tom\",\n      buttonValue:\"75\"\n    },\n    {\n      buttonName:\"L\",\n      buttonText:\"L - Tink\",\n      buttonValue:\"76\"\n    }\n  ]\n\n\n  export default buttons","import React, {useEffect} from 'react';\nimport buttons from './buttons'\nimport './App.css';\n\n//Importing Sounds\nimport KeyA from './sounds/clap.wav'\nimport KeyS from './sounds/hihat.wav'\nimport KeyD from './sounds/kick.wav'\nimport KeyF from './sounds/openhat.wav'\nimport KeyG from './sounds/boom.wav'\nimport KeyH from './sounds/ride.wav'\nimport KeyI from './sounds/snare.wav'\nimport KeyJ from './sounds/tom.wav'\nimport KeyK from './sounds/tink.wav'\n\n\n\n\nfunction App() {\n\n\n\nconst sounds = {\n  65:KeyA,\n  83:KeyS,\n  68:KeyF,\n  70:KeyD,\n  71:KeyG,\n  72:KeyH,\n  74:KeyI,\n  75:KeyJ,\n  76:KeyK\n}\n\nconst handleClick = (keyPressed) =>{\n  let theSound = new Audio(sounds[keyPressed])\n  theSound.play()\n}\n\nuseEffect(()=>{\n  document.addEventListener('keydown',(event)=>{\n    \n    \n    console.log(\"aprestaste: \",event.keyCode)\n    let theKey =event.keyCode ;\n    let theSound = new Audio(sounds[theKey])\n    theSound.play()\n  },false)\n})\n\n\n\n  return (\n    <div className=\"main-container\" >\n      {buttons.map(button=>{\n        return(\n          <section className=\"button-container\">\n            <button className=\"buttons\" onClick={(e)=>{handleClick(button.buttonValue)}} name={button.buttonName}>{button.buttonText}</button>\n          </section>\n          \n        )\n      })}\n\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}